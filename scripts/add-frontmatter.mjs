/**
 * Script to add Just the Docsâ€“compatible frontmatter to all Markdown files
 * generated by TypeDoc + Markdown plugin, and to auto-create missing index.md
 * files with a table of contents for each folder.
 *
 * Features:
 * - Sequential nav_order across entire docs tree
 * - Adds `parent` metadata for proper hierarchy
 * - Creates missing index.md with has_children: true
 * - Lists child pages and subfolders in directory TOC
 *
 * Usage: node add-frontmatter.js
 */

import fs from "fs";
import path from "path";

const DOCS_DIR = "./docs"; // Root folder for TypeDoc output

/**
 * Capitalizes and prettifies a string (e.g., "foo_bar" â†’ "Foo Bar")
 */
function capitalize(str) {
  return str.replace(/[-_]/g, " ").replace(/\b\w/g, c => c.toUpperCase());
}

/**
 * Adds frontmatter to a given Markdown file if missing.
 * @param {string} filePath - Absolute path to the Markdown file
 * @param {number} navOrder - Navigation order number
 * @param {string} parent - Optional parent page title
 */
function addFrontmatter(filePath, navOrder, parent = "") {
  const content = fs.readFileSync(filePath, "utf8");

  // Skip if already has frontmatter
  if (content.startsWith("---")) return;

  const baseName = path.basename(filePath, ".md");
  let title;

  if (/^index$/i.test(baseName)) {
    title = parent || capitalize(path.basename(path.dirname(filePath)));
  } else {
    title = capitalize(baseName);
  }

  const frontmatter = `---
layout: default
title: ${title}
${parent && !/^index$/i.test(baseName) ? `parent: ${parent}\n` : ""}nav_order: ${navOrder}
${/^index$/i.test(baseName) ? "has_children: true\n" : ""}---
  
`;

  fs.writeFileSync(filePath, frontmatter + content, "utf8");
  console.log(`âœ… Added frontmatter to: ${filePath}`);
}

/**
 * Creates an index.md file if missing, with a TOC of the directory's contents.
 * @param {string} dir - Directory path
 * @param {number} navOrder - nav_order to assign
 * @returns {string} - The title of the created index page
 */
function ensureIndexMd(dir, navOrder) {
  const indexPath = path.join(dir, "index.md");

  if (!fs.existsSync(indexPath)) {
    const title = capitalize(path.basename(dir));
    const entries = fs.readdirSync(dir, { withFileTypes: true });

    const fileLinks = entries
      .filter(e => e.isFile() && e.name.endsWith(".md") && e.name.toLowerCase() !== "index.md")
      .map(e => `- [${capitalize(path.basename(e.name, ".md"))}](${e.name})`);

    const folderLinks = entries
      .filter(e => e.isDirectory())
      .map(e => `- [${capitalize(e.name)}](${e.name}/)`);

    const links = [...fileLinks, ...folderLinks].join("\n");

    const frontmatter = `---
layout: default
title: ${title}
nav_order: ${navOrder}
has_children: true
---

# ${title}

${links || "_No pages yet._"}
`;

    fs.writeFileSync(indexPath, frontmatter, "utf8");
    console.log(`ðŸ“„ Created index.md in ${dir}`);
    return title;
  }

  return capitalize(path.basename(dir)); // Return title for parent references
}

/**
 * Recursively processes directories:
 * - Creates missing index.md
 * - Adds frontmatter to files
 * - Preserves sequential nav_order
 *
 * @param {string} dir - Directory to process
 * @param {number} startOrder - nav_order start
 * @param {string} parent - Parent title for child files
 * @returns {number} - The next available nav_order
 */
function processDir(dir, startOrder = 1, parent = "") {
  let order = startOrder;

  // Ensure index.md exists and get the directory title
  const currentTitle = ensureIndexMd(dir, order);
  order++;

  // Sort: files first (index.md first), then directories, all alphabetical
  const entries = fs.readdirSync(dir, { withFileTypes: true }).sort((a, b) => {
    if (a.isFile() && !b.isFile()) return -1;
    if (!a.isFile() && b.isFile()) return 1;

    if (a.isFile() && b.isFile()) {
      if (a.name.toLowerCase() === "index.md") return -1;
      if (b.name.toLowerCase() === "index.md") return 1;
    }
    return a.name.localeCompare(b.name, undefined, { sensitivity: "base" });
  });

  // Process files and subfolders
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);

    if (entry.isFile() && entry.name.endsWith(".md")) {
      addFrontmatter(fullPath, order++, currentTitle);
    } else if (entry.isDirectory()) {
      order = processDir(fullPath, order, currentTitle);
    }
  }

  return order;
}

// Start processing
processDir(DOCS_DIR);
